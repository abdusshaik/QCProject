{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a842c1cd",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e44bb281",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'numpy'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mnp\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mrandom\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m randint\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mlinalg\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m matrix_power\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'numpy'"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from numpy.random import randint\n",
    "from numpy.linalg import matrix_power\n",
    "\n",
    "# Function to calculate greatest common divisor (gcd) \n",
    "def gcd(a, b):\n",
    "    while b != 0:\n",
    "        a, b = b, a % b\n",
    "    return a\n",
    "\n",
    "# Continued fraction expansion \n",
    "def continued_fraction(a, N):\n",
    "    r = a / N\n",
    "    frac = [0, int(r)]\n",
    "    while frac[-1] != r:\n",
    "        r = 1 / (r - int(r))\n",
    "        frac.append(int(r))\n",
    "    return frac\n",
    "\n",
    "# Find period using continued fraction expansion\n",
    "def find_period(a, N):\n",
    "    frac = continued_fraction(a, N)\n",
    "    if len(frac) % 2 == 0:\n",
    "        frac.pop()\n",
    "    return frac\n",
    "\n",
    "# Perform quantum phase estimation\n",
    "def quantum_phase_estimation(U, n):\n",
    "    # Create Hadamard gate\n",
    "    H = 1 / np.sqrt(2) * np.array([[1, 1], [1, -1]])\n",
    "\n",
    "    # Initialize qubits\n",
    "    qubits = np.zeros((2**n, 1))\n",
    "    qubits[0] = 1\n",
    "\n",
    "    # Apply Hadamard gate to first register\n",
    "    for i in range(n):\n",
    "        qubits = np.kron(H, np.eye(2**(n-1))) @ qubits\n",
    "\n",
    "    # Apply controlled-U gates\n",
    "    for _ in range(int(2**(n-1))):\n",
    "        qubits = np.kron(np.eye(2), U) @ qubits\n",
    "\n",
    "    # Apply inverse quantum Fourier transform\n",
    "    qubits = np.fft.ifft(qubits, axis=0)\n",
    "\n",
    "    # Measure and return result\n",
    "    return qubits.argmax()\n",
    "\n",
    "# Perform Shor's algorithm\n",
    "def shors_algorithm(N, attempts=10):\n",
    "    for _ in range(attempts):\n",
    "        a = randint(2, N)\n",
    "        if gcd(a, N) != 1:\n",
    "            return gcd(a, N)\n",
    "        else:\n",
    "            frac = find_period(a, N)\n",
    "            for period in frac[1:]:\n",
    "                if period % 2 == 0:\n",
    "                    r = int(matrix_power(a, period/2))\n",
    "                    if (r + 1) % N != 0:\n",
    "                        p = gcd(r + 1, N)\n",
    "                        return p\n",
    "    return \"Failed to find factors\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "c7abc1fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "factors:  75\n"
     ]
    }
   ],
   "source": [
    "shorsTests = shors_algorithm(123450)\n",
    "print(\"factors: \", shorsTests)"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "ed9264bd804eca024caa153aedf17f90535f1149313d01304d206fc3aaf3875b"
  },
  "kernelspec": {
   "display_name": "Python 3.9.12 64-bit ('base': conda)",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
